{
	"name": "Script Web Delivery",
	"fullname": "exploit/multi/script/web_delivery",
	"disclosure_date": "2013-07-19",
	"type": "exploit",
	"author": [
		"Andrew Smith \"jakx\" <jakx.ppr@gmail.com>",
		"Ben Campbell <eat_meatballs@hotmail.co.uk>",
		"Chris Campbell",
		"Casey Smith",
		"Trenton Ivey",
		"g0tmi1k",
		"bcoles <bcoles@gmail.com>",
		"Matt Nelson",
		"phra",
		"Nick Landers"
	],
	"description": "This module quickly fires up a web server that serves a payload.\n\n          The module will provide a command to be run on the target machine\n          based on the selected target. The provided command will download\n          and execute a payload using either a specified scripting language\n          interpreter or \"squiblydoo\" via regsvr32.exe for bypassing\n          application whitelisting.\n\n          The main purpose of this module is to quickly establish a session on a\n          target machine when the attacker has to manually type in the command:\n          e.g. Command Injection, RDP Session, Local Access or maybe Remote\n          Command Execution.\n\n          This attack vector does not write to disk so it is less likely to\n          trigger AV solutions and will allow privilege escalations supplied\n          by Meterpreter.\n\n          When using either of the PSH targets, ensure the payload architecture\n          matches the target computer or use SYSWOW64 powershell.exe to execute\n          x86 payloads on x64 machines.\n\n          Regsvr32 uses \"squiblydoo\" technique to bypass application whitelisting.\n          The signed Microsoft binary file, Regsvr32, is able to request an .sct\n          file and then execute the included PowerShell command inside of it.\n\n          Similarly, the pubprn target uses the pubprn.vbs script to request and\n          execute a .sct file.\n\n          Both web requests (i.e., the .sct file and PowerShell download/execute)\n          can occur on the same port.\n\n          The SyncAppvPublishingServer target uses SyncAppvPublishingServer.exe\n          Microsoft signed binary to request and execute a PowerShell script. This\n          technique only works on Windows 10 builds <= 1709.\n\n          \"PSH (Binary)\" will write a file to the disk, allowing for custom binaries\n          to be served up to be downloaded and executed.",
	"references": [
		"URL-https://securitypadawan.blogspot.com/2014/02/php-meterpreter-web-delivery.html",
		"URL-https://www.pentestgeek.com/2013/07/19/invoke-shellcode/",
		"URL-http://www.powershellmagazine.com/2013/04/19/pstip-powershell-command-line-switches-shortcuts/",
		"URL-https://www.darkoperator.com/blog/2013/3/21/powershell-basics-execution-policy-and-code-signing-part-2.html",
		"URL-https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
		"URL-https://enigma0x3.net/2017/08/03/wsh-injection-a-case-study/",
		"URL-https://iwantmore.pizza/posts/amsi.html",
		"URL-https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/",
		"URL-https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/",
		"URL-https://lolbas-project.github.io/lolbas/Scripts/Pubprn/"
	],
	"platform": "Linux,OSX,PHP,Python,Windows",
	"targets": [
		"Python",
		"PHP",
		"PSH",
		"Regsvr32",
		"pubprn",
		"SyncAppvPublishingServer",
		"PSH (Binary)",
		"Linux",
		"Mac OS X"
	],
	"mod_time": "2023-06-21 16:35:41 +0000",
	"path": "/modules/exploits/multi/script/web_delivery.rb",
	"is_install_path": true,
	"ref_name": "multi/script/web_delivery"
}
