{
	"name": "Microsoft SQL Server Payload Execution via SQL Injection",
	"fullname": "exploit/windows/mssql/mssql_payload_sqli",
	"rank": 600,
	"disclosure_date": "2000-05-30",
	"type": "exploit",
	"author": [
		"David Kennedy \"ReL1K\" <kennedyd013@gmail.com>",
		"jduck <jduck@metasploit.com>",
		"Rodrigo Marcos"
	],
	"description": "This module will execute an arbitrary payload on a Microsoft SQL\n        Server, using a SQL injection vulnerability.\n\n        Once a vulnerability is identified this module\n        will use xp_cmdshell to upload and execute Metasploit payloads.\n        It is necessary to specify the exact point where the SQL injection\n        vulnerability happens. For example, given the following injection:\n\n        http://www.example.com/show.asp?id=1;exec xp_cmdshell 'dir';--&cat=electrical\n\n        you would need to set the following path:\n        set GET_PATH /showproduct.asp?id=1;[SQLi];--&cat=foobar\n\n        In regard to the payload, unless there is a closed port in the web server,\n        you dont want to use any \"bind\" payload, specially on port 80, as you will\n        stop reaching the vulnerable web server host. You want a \"reverse\" payload, probably to\n        your port 80 or to any other outbound port allowed on the firewall.\n        For privileged ports execute Metasploit msfconsole as root.\n\n        Currently, three delivery methods are supported.\n\n        First, the original method uses Windows 'debug.com'. File size restrictions are\n        avoided by incorporating the debug bypass method presented by SecureStat at\n        Defcon 17. Since this method invokes ntvdm, it is not available on x64 systems.\n\n        A second method takes advantage of the Command Stager subsystem. This allows using\n        various techniques, such as using a TFTP server, to send the executable. By default\n        the Command Stager uses 'wcsript.exe' to generate the executable on the target.\n\n        Finally, ReL1K's latest method utilizes PowerShell to transmit and recreate the\n        payload on the target.\n\n        NOTE: This module will leave a payload executable on the target system when the\n        attack is finished.",
	"references": [
		"CVE-2000-0402",
		"OSVDB-557",
		"BID-1281",
		"CVE-2000-1209",
		"OSVDB-15757",
		"BID-4797",
		"URL-http://www.secforce.co.uk/blog/2011/01/penetration-testing-sql-injection-and-metasploit/"
	],
	"platform": "Windows",
	"arch": "x86, x64",
	"rport": 80,
	"autofilter_ports": [
		80,
		8080,
		443,
		8000,
		8888,
		8880,
		8008,
		3000,
		8443
	],
	"autofilter_services": [
		"http",
		"https"
	],
	"targets": [
		"Automatic"
	],
	"mod_time": "2020-10-02 17:38:06 +0000",
	"path": "/modules/exploits/windows/mssql/mssql_payload_sqli.rb",
	"is_install_path": true,
	"ref_name": "windows/mssql/mssql_payload_sqli"
}
